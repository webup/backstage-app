app:
  # Should be the same as backend.baseUrl when using the `app-backend` plugin.
  baseUrl: https://sc.uisee.com
  title: Backstage

organization:
  name: UISEE

backend:
  # Note that the baseUrl should be the URL that the browser and other clients
  # should use when communicating with the backend, i.e. it needs to be
  # reachable not just from within the backend host, but from all of your
  # callers. When its value is "http://localhost:7007", it's strictly private
  # and can't be reached by others.
  baseUrl: https://sc.uisee.com
  listen:
    port: 7007
    # The following host directive binds to all IPv4 interfaces when its value
    # is "0.0.0.0". This is the most permissive setting. The right value depends
    # on your specific deployment. If you remove the host line entirely, the
    # backend will bind on the interface that corresponds to the backend.baseUrl
    # hostname.
    host: 0.0.0.0
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: https://sc.uisee.com
    # methods: [GET, POST, PUT, DELETE]
    # credentials: true
  reading:
    allow:
      - host: '*.uisee.ai'

  # config options: https://node-postgres.com/api/client
  database:
    client: pg
    connection:
      host: ${POSTGRES_SERVICE_HOST}
      port: ${POSTGRES_SERVICE_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      # https://node-postgres.com/features/ssl
      # you can set the sslmode configuration option via the `PGSSLMODE` environment variable
      # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
      # ssl:
      #   ca: # if you have a CA file and want to verify it you can uncomment this section
      #     $file: <file-path>/ca/server.crt

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'external' # Alternatives - 'external'
  publisher:
    type: 'awsS3' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.
    awsS3:
      bucketName: 'backstage-techdocs'
      bucketRootPath: '/'
      credentials:
          accessKeyId: '${MINIO_ACCESSKEY}'
          secretAccessKey: '${MINIO_SECRETKEY}'
      endpoint: 'http://${MINIO_HOST}:${MINIO_PORT}'
      s3ForcePathStyle: true

integrations:
  gitlab:
    - host: gitlab.uisee.ai
      token: ${GITLAB_TOKEN}
      apiBaseUrl: https://gitlab.uisee.ai/api/v4

proxy:
  '/gitlabci':
    target: 'https://gitlab.uisee.ai/api/v4'
    allowedMethods: ['GET']
    headers:
      PRIVATE-TOKEN: ${GITLAB_TOKEN}

harbor:
  baseUrl: https://cloud-reg.uisee.com
  username: ${HARBOR_USERNAME}
  password: ${HARBOR_PASSWORD}

catalog:
  rules: 
    - allow: [Component, API, Location, Template, System, Group, User, Resource, Domain]
    
  providers:
    gitlab:
      service:
        host: gitlab.uisee.ai # Identifies one of the hosts set up in the integrations
        branch: develop # Optional. Uses `master` as default
        group: cloud/service # Group and subgroup (if needed) to look for repositories
        entityFilename: catalog-info.yaml # Optional. Defaults to `catalog-info.yaml`
